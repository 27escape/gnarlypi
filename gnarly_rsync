#!/usr/bin/env python3

import os
import re
import sys
import signal
import logging
import argparse
import subprocess

from libs.status import Status

# ----------------------------------------------------------------------------

USER = os.getenv("USER")
HOME = os.getenv("HOME")
APP_NAME = os.path.basename(__file__)

# Replace with your desired source directory
SOURCE_DIR = os.path.join(HOME, "photos")

logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------------


def signal_handler(sig, frame):
    """ """

    logger.info("You pressed Ctrl+C!")

    status.fivelines(("", __name__, "", "cancelled", ""))
    sys.exit(3)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)



# ----------------------------------------------------------------------------
def setLogLevel(loglevel):
    logging.basicConfig(
        format="%(asctime)s %(module)s(%(funcName)s:%(lineno)d) %(levelname)s : %(message)s",
        level=loglevel,
    )

# ----------------------------------------------------------------------------

def run_rsync_with_progress(source, destination):
    """Runs the rsync command and parses the progress output.

    Args:
        source: The source directory to be backed up.
        destination: The destination directory for the backup.

    """

    rsync_cmd = ["rsync", "-aviP", "--progress", "--no-inc-recursive", "--exclude='.DS_store'", source, destination]

    logger.info( f"running [{' '.join( rsync_cmd)}]")

    try:
        current_file = ""
        total = 0
        proc = subprocess.Popen(rsync_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        while proc.poll() is None:
            line = proc.stdout.readline().decode("utf-8").strip()
            # find new filenames
            if file_match := re.search(r"^>f.*?\s(.*)$", line):
                # 1 is the match itself
                current_file = file_match.group(1)
            # find file counts
            elif count_match := re.search(r"to-chk\=([0-9]+)\/([0-9]+)", line):
              # the number of files known that are still around to process
              left = int(count_match.group(1))
              total = int(count_match.group(2))
              # total is a combination of files and dirs locally
              # we are really only using it as a guide
              # print( f"____{total - left}/{total} {current_file}")

              bps=0
              if bps_match := re.search( r"%\s+(.*?)B\/s\s", line):
                value = bps_match.group(1)

                # print( f"match {value}")
                if value.endswith( "M"):
                  value = float(value[:-1])
                  bps = value * 1024 * 1024
                elif value.endswith( "K") or value.endswith( "k"):
                  value = float(value[:-1])
                  bps = value * 1024
                else:
                  bps = value

              status.copydata(
                current_file,
                current_file,
                1,
                1,
                (total - left),
                total,
                int(bps)
            )
        logger.info( f"backed up {total} files/folders")


    except subprocess.CalledProcessError as e:
        print(f"Error running rsync: {e}")
        return 0, 0

# ----------------------------------------------------------------------------

if __name__ == "__main__":

    if USER == "root":
        logger.info("Do not run this script as root")
        sys.exit(1)

    LOGLEVEL = os.environ.get("LOGLEVEL", "WARNING").upper()
    logger.info("Started")

    status = Status()

    parser = argparse.ArgumentParser(
        description=f"Copy backed up photos to a remote system using rsync"
    )
    parser.add_argument(
      "source",
      type=str,
      help="Full path of imported photos",
    )
    parser.add_argument(
      "target",
      type=str,
      help="Target path on a remote system that will accept automatic SSH/rsync with SSH keys",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        # the following makes it a boolean flag
        action="store_true",
        help="Increase level of logging",
    )
    args = parser.parse_args()
    logLevel = "INFO" if (args.verbose) else LOGLEVEL
    setLogLevel(logLevel)


    # Check if source dierctory exists
    if not os.path.exists(args.source) or not os.path.isdir( args.source):
        logger.info(f"Error: Source '{args.source}' is not a directory.")
        sys.exit(2)

    # we cannot check the target, this will be down to the user

    run_rsync_with_progress(args.source, args.target)
