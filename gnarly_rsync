#!/usr/bin/env python3

import os
import re
import sys
import signal
import logging
import argparse
import contextlib
import subprocess

from libs.status import Status

# ----------------------------------------------------------------------------

USER = os.getenv("USER")
HOME = os.getenv("HOME")
APP_NAME = os.path.basename(__file__)

# Replace with your desired source directory
SOURCE_DIR = os.path.join(HOME, "photos")

logger = logging.getLogger(APP_NAME)

# ----------------------------------------------------------------------------


def signal_handler(sig, frame):
    """ """

    logger.info("You pressed Ctrl+C!")

    status.fivelines(("", APP_NAME, "", "cancelled", ""))
    sys.exit(3)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)



# ----------------------------------------------------------------------------
def setLogLevel(loglevel):
    logging.basicConfig(
        format="%(asctime)s %(module)s(%(funcName)s:%(lineno)d) %(levelname)s : %(message)s",
        level=loglevel,
    )

# taken from https://stackoverflow.com/questions/803265/getting-realtime-output-using-subprocess
# Unix, Windows and old Macintosh end-of-line
newlines = ['\n', '\r\n', '\r']
def unbuffered(proc, stream='stdout'):
    stream = getattr(proc, stream)
    with contextlib.closing(stream):
        while True:
            out = []
            last = stream.read(1)
            # Don't loop forever
            if last == '' and proc.poll() is not None:
                break
            while last not in newlines:
                # Don't loop forever
                if last == '' and proc.poll() is not None:
                    break
                out.append(last)
                last = stream.read(1)
            out = ''.join(out)
            yield out


# ----------------------------------------------------------------------------

def run_rsync_with_progress(source, destination):
    """Runs the rsync command and parses the progress output.

    Args:
        source: The source directory to be backed up.
        destination: The destination directory for the backup.

    """

    rsync_cmd = ["rsync", "-aviP", "--progress", "--no-inc-recursive", "--exclude='.DS_store'", source, destination]

    logger.info( f"running [{' '.join( rsync_cmd)}]")

    status.fivelines(( "", "RSYNC", "", "", ""))

    try:
        current_file = ""
        filesize = 0
        left = 0
        total = 0
        # universal_newlines -  Make all end-of-lines '\n'
        # this means we will also get line updates during copy process that would have ended with \r
        # also assumes output is text
        proc = subprocess.Popen(rsync_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        while proc.poll() is None:
            # line = proc.stdout.readline().decode("utf-8").strip()
            line = proc.stdout.readline().strip()
            logger.info( line)
            if file_match := re.search(r"^.f.*?\s(.*)$", line):
                current_file = os.path.join( os.path.dirname(source), file_match.group(1))
                logger.info( f"current {current_file}")
                filesize = os.path.getsize( current_file)
                # log when we have a file, it may take some time to copy if remote
                status.copydata(
                  current_file,
                  current_file,
                  0,
                  filesize,
                  (total - left),
                  total
                )

            # catch updates to file copy stats
            elif count_match := re.search(r"([0-9,]+).*?%\s+(.*?)B\/s\s+", line):
              # check end of file copy info
                bytes_copied = int(count_match.group(1).replace(',', ''))
                bps = 0
                bps_str = count_match.group(2)

                # find file counts, this happens when the file is complete
                if end_match := re.search(r"to-chk\=([0-9]+)\/([0-9]+)", line):
                  # the number of files known that are still around to process
                  left = int(end_match.group(1))
                  # total is a combination of files and dirs locally
                  # we are really only using it as a guide
                  total = int(end_match.group(2))

                if bps_str.endswith( "M"):
                  bps_str = float(bps_str[:-1])
                  bps = bps_str * 1024 * 1024
                elif bps_str.endswith( "K") or bps_str.endswith( "k"):
                  bps_str = float(bps_str[:-1])
                  bps = bps_str * 1024
                else:
                  bps = bps_str

                logger.info( f"{total - left}/{total} {int(bps)} {current_file}")
                status.copydata(
                  current_file,
                  current_file,
                  filesize,
                  bytes_copied,
                  (total - left),
                  total,
                  int(bps)
                )

        logger.info( f"backed up {total} files/folders")
        status.fivelines(( "", "Completed", "", f"{total} files", ""))


    except subprocess.CalledProcessError as e:
        print(f"Error running rsync: {e}")
        return 0, 0

# ----------------------------------------------------------------------------

if __name__ == "__main__":

    if USER == "root":
        logger.info("Do not run this script as root")
        sys.exit(1)

    LOGLEVEL = os.environ.get("LOGLEVEL", "WARNING").upper()
    logger.info("Started")

    status = Status()

    parser = argparse.ArgumentParser(
        description=f"Copy backed up photos to a remote system using rsync"
    )
    parser.add_argument(
      "source",
      type=str,
      help="Full path of imported photos",
    )
    parser.add_argument(
      "target",
      type=str,
      help="Target path on a remote system that will accept automatic SSH/rsync with SSH keys",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        # the following makes it a boolean flag
        action="store_true",
        help="Increase level of logging",
    )
    args = parser.parse_args()
    logLevel = "INFO" if (args.verbose) else LOGLEVEL
    setLogLevel(logLevel)


    # Check if source dierctory exists
    if not os.path.exists(args.source) or not os.path.isdir( args.source):
        logger.info(f"Error: Source '{args.source}' is not a directory.")
        sys.exit(2)

    # we cannot check the target, this will be down to the user

    run_rsync_with_progress(args.source, args.target)
